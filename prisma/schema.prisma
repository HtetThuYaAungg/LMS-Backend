datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    NORMAL_USER
    STAFF
}

enum EnrollmentStatusEnum {
    PENDING
    APPROVED
    REJECTED
}

enum TransactionType {
    PAYMENT
    REFUND
}

enum Status {
    ACTIVE
    INACTIVE
    DELETE
}

model User {
    id             Int            @id @default(autoincrement())
    email          String         @unique
    password       String
    role           Role
    firstName      String?
    lastName       String?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    status         Status         @default(ACTIVE)
    posts          Post[]
    courses        Course[]
    videos         Video[]
    comments       Comment[]
    replies        Reply[]
    transactions   Transaction[]
    enrollments    Enrollment[]
    userHistories  UserHistory[]
    postHistories  PostHistory[]
    videoHistories VideoHistory[]
}

model UserHistory {
    id              Int      @id @default(autoincrement())
    userId          Int
    user            User     @relation(fields: [userId], references: [id])
    email           String   @unique
    password        String
    confirmPassword String
    role            Role
    firstName       String?
    lastName        String?
    createdAt       DateTime @default(now())
}

model Category {
    id            Int           @id @default(autoincrement())
    name          String
    parentId      Int?
    parent        Category?     @relation("CategoryToParent", fields: [parentId], references: [id])
    children      Category[]    @relation("CategoryToParent")
    posts         Post[]
    postHistories PostHistory[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    status        Status        @default(ACTIVE)
}

model Post {
    id            Int               @id @default(autoincrement())
    categoryId    Int
    category      Category          @relation(fields: [categoryId], references: [id])
    authorId      Int
    author        User              @relation(fields: [authorId], references: [id])
    comments      Comment[]
    postHistories PostHistory[]
    translations  PostTranslation[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    status        Status            @default(ACTIVE)
}

model PostHistory {
    id           Int                      @id @default(autoincrement())
    postId       Int
    post         Post                     @relation(fields: [postId], references: [id])
    categoryId   Int
    category     Category                 @relation(fields: [categoryId], references: [id])
    authorId     Int
    author       User                     @relation(fields: [authorId], references: [id])
    translations PostHistoryTranslation[]
    createdAt    DateTime                 @default(now())
}

model PostTranslation {
    postId   Int
    post     Post   @relation(fields: [postId], references: [id])
    language String
    title    String
    content  String

    @@id([postId, language])
}

model PostHistoryTranslation {
    postHistoryId Int
    postHistory   PostHistory @relation(fields: [postHistoryId], references: [id])
    language      String
    title         String
    content       String

    @@id([postHistoryId, language])
}

model Course {
    id            Int           @id @default(autoincrement())
    title         String
    description   String
    amount        Float
    coverPhotoUrl String
    createdBy     Int
    creator       User          @relation(fields: [createdBy], references: [id])
    lessons       Lesson[]
    enrollments   Enrollment[]
    transition    Transaction[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    status        Status        @default(ACTIVE)
}

model Lesson {
    id             Int            @id @default(autoincrement())
    title          String
    content        String
    courseId       Int
    course         Course         @relation(fields: [courseId], references: [id])
    order          Int
    videos         Video[]
    videoHistories VideoHistory[]
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    status         Status         @default(ACTIVE)
}

model Video {
    id             Int            @id @default(autoincrement())
    url            String
    title          String
    uploadedBy     Int
    uploader       User           @relation(fields: [uploadedBy], references: [id])
    lessonId       Int
    lesson         Lesson         @relation(fields: [lessonId], references: [id])
    videoHistories VideoHistory[]
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    status         Status         @default(ACTIVE)
}

model VideoHistory {
    id         Int      @id @default(autoincrement())
    videoId    Int
    video      Video    @relation(fields: [videoId], references: [id])
    url        String
    title      String
    uploadedBy Int
    uploader   User     @relation(fields: [uploadedBy], references: [id])
    lessonId   Int
    lesson     Lesson   @relation(fields: [lessonId], references: [id])
    createdAt  DateTime @default(now())
}

model Enrollment {
    id                Int                  @id @default(autoincrement())
    userId            Int
    user              User                 @relation(fields: [userId], references: [id])
    courseId          Int
    course            Course               @relation(fields: [courseId], references: [id])
    enorollmnetStatus EnrollmentStatusEnum @default(PENDING)
    createdAt         DateTime             @default(now())
    updatedAt         DateTime             @updatedAt
    status            Status               @default(ACTIVE)
}

model Transaction {
    id        Int             @id @default(autoincrement())
    userId    Int
    user      User            @relation(fields: [userId], references: [id])
    courseId  Int
    course    Course          @relation(fields: [courseId], references: [id])
    amount    Float
    type      TransactionType
    url       String
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    status    Status          @default(ACTIVE)
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    replies   Reply[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status Status @default(ACTIVE)
}

model Reply {
    id        Int      @id @default(autoincrement())
    content   String
    commentId Int
    comment   Comment  @relation(fields: [commentId], references: [id])
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
}
